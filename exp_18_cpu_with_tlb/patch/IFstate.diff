--- E:\calab\ucas-ca-lab\exp_18_cpu_with_tlb\myCPU\IFstate.v
+++ E:\calab\ucas-ca-lab\exp_16_axi_rand_delay\myCPU\IFstate.v
@@ -28,12 +28,9 @@
     output     [31:0] if_pc,
     input      [31:0] ertn_pc,
     input      [31:0] exec_pc,
+    input             ertn_flush,
     input             exec_flush,
-    input             ertn_flush,
-    output            if_exc_rf,
-    //tlb related
-    input             tlb_flush,
-    input      [31:0] tlb_flush_addr
+    output            if_exc_rf
 );
     reg  [31:0] pc_src;
     reg         pre_if_handled;
@@ -50,14 +47,13 @@
     // reg         if_valid;
     wire [31:0] pc_seq;
     wire [31:0] pre_if_pc_next;
-    wire        pre_if_exc;
-    reg         if_exc_reg;
+    
 
     assign pre_if_allowin  = pre_if_handled & if_allowin 
                              | if_allowin & inst_sram_addr_ok;//not received request or has gone
-    assign pre_if_ready_go = inst_sram_addr_ok | pre_if_handled | pre_if_exc;//request received
+    assign pre_if_ready_go = inst_sram_addr_ok | pre_if_handled;//request received
     assign if_allowin      = if_ready_go & id_allowin | if_gone;
-    assign if_ready_go     = (inst_sram_data_ok | if_handled) & ~if_gone | if_exc_reg;
+    assign if_ready_go     = (inst_sram_data_ok | if_handled) & ~if_gone;
     assign if_to_id_valid  = if_valid & if_ready_go;
     
     always @(posedge clk ) begin
@@ -83,14 +79,14 @@
             pre_if_valid <= 1'b1;
         else if(~pre_if_handled)//request not received, always valid
             pre_if_valid <= 1'b1;
-        else if(pre_if_handled & (br_taken_exe | br_taken_id | exec_flush | ertn_flush | tlb_flush) & ~if_allowin)
+        else if(pre_if_handled & (br_taken_exe | br_taken_id | exec_flush | ertn_flush) & ~if_allowin)
             pre_if_valid <= 1'b0;
     end
 
     always @(posedge clk) begin
         if(~resetn)
             if_valid <= 1'b0;
-        else if(br_taken_exe | br_taken_id | exec_flush | ertn_flush | tlb_flush)
+        else if(br_taken_exe | br_taken_id | exec_flush | ertn_flush)
             if_valid <= 1'b0;
         else if(if_allowin & pre_if_ready_go)
             if_valid <= pre_if_valid;
@@ -121,16 +117,9 @@
             if_inst_reg <= if_inst_reg;
     end
 
-    always @(posedge clk ) begin
-        if(~resetn)
-            if_exc_reg <= 0;
-        else if(pre_if_ready_go & if_allowin)
-            if_exc_reg <= pre_if_exc;
-    end
-
     /* Instruction Fetch: use inst_sram */
     // assign inst_sram_en    = if_allowin & resetn;
-    assign inst_sram_req = ~pre_if_handled & if_allowin & ~pre_if_exc;
+    assign inst_sram_req = ~pre_if_handled & if_allowin;
     assign inst_sram_wr = 1'b0;
     assign inst_sram_size = 2'b10;
     assign inst_sram_wstrb = 4'b0;
@@ -144,16 +133,15 @@
 
     /* Write if_pc: write pre_if_pc_next generated from the former instruction */
     assign pc_seq  = pc_src + 32'd4;  
-    assign pre_if_pc_next = tlb_flush? tlb_flush_addr : exec_flush? exec_pc: ertn_flush? ertn_pc :br_taken_exe ? br_target_exe : br_taken_id ? br_target_id : pc_seq;
+    assign pre_if_pc_next = exec_flush? exec_pc: ertn_flush? ertn_pc :br_taken_exe ? br_target_exe : br_taken_id ? br_target_id : pc_seq;
     // br signals passed on from IDstate
     always @(posedge clk) begin
         if(~resetn)
             pc_src <= 32'h1c000000;
-        else if(pre_if_allowin | tlb_flush | exec_flush | ertn_flush | br_taken_exe | br_taken_id)
+        else if(pre_if_allowin | exec_flush | ertn_flush | br_taken_exe | br_taken_id)
             pc_src <= pre_if_pc_next;
     end
     assign if_inst = {32{~if_handled}} & inst_sram_rdata | {32{if_handled}} & if_inst_reg;
+    assign if_exc_rf = | if_pc_reg[1:0];
     assign if_valid_rf = if_valid;
-    assign pre_if_exc = | pc_src[1:0];
-    assign if_exc_rf = if_exc_reg;
 endmodule
