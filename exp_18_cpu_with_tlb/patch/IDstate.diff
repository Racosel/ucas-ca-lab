--- E:\calab\ucas-ca-lab\exp_16_axi_rand_delay\myCPU\IDstate.v
+++ E:\calab\ucas-ca-lab\exp_18_cpu_with_tlb\myCPU\IDstate.v
@@ -25,24 +25,29 @@
     //{mem_we, ld_b, ld_h, ld_w, ld_se, st_b, st_h, st_w}
     output     [31:0] id_rkd_value,
     // idstate <-> wbstate
-    // input      [5 :0] exe_rf_all, // {exe_rf_we, exe_rf_waddr}
-    input      [53:0] exe_fwd_all, // {{exe_csr_wr,exe_csr_wr_num},exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result}
-    input      [53:0] mem_fwd_all, // {{mem_csr_wr,mem_csr_wr_num},mem_rf_we, mem_rf_waddr, mem_rf_wdata}
-    input      [52:0] wb_fwd_all,  // {{wb_csr_wr,wb_csr_wr_num},wb_rf_we, wb_rf_waddr, wb_rf_wdata} csr not included
+
+    // input      [53:0] exe_fwd_all, // {{exe_csr_wr,exe_csr_wr_num},exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result}
+    // input      [53:0] mem_fwd_all, // {{mem_csr_wr,mem_csr_wr_num},mem_rf_we, mem_rf_waddr, mem_rf_wdata}
+    // input      [52:0] wb_fwd_all,  // {{wb_csr_wr,wb_csr_wr_num},wb_rf_we, wb_rf_waddr, wb_rf_wdata} csr not included
+
+    input      [39:0] exe_fwd_all,//{exe_res_from_csr, exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result}
+    input      [38:0] mem_fwd_all, //{mem_res_from_csr, mem_rf_we,mem_rf_waddr, mem_rf_wdata}
+    input      [37:0] wb_fwd_all,//{wb_rf_we,wb_rf_waddr,wb_rf_wdata}
 
     input             exe_valid,
     input             mem_valid,
     input             wb_valid,
 
-    input             cancel_exc_ertn,//canceled by exception or ereturn
-    input      [31:0] csr_rd_value,
-    input             if_exc_rf,//only adef
+    //csr related
+    input             cancel_exc_ertn_tlbflush,//canceled by exception or ereturn
+    input             if_exc_rf,//if can only generate adef
     input             has_int,
-    output            csr_re,//to csr
-    output     [13:0] csr_rd_num,
-    output     [78:0] id_csr_rf,//{csr_rd,csr_wr,csr_wr_num,csr_rd_value,csr_mask,csr_wvalue}
-    output     [5 :0] id_exc_rf,//{INT,ADEF,BRK,INE,SYS,ertn}
-    output     [1 :0] id_timer_rf //{inst_rdcntvh,inst_rdcntvl}
+    output     [79:0] id_csr_rf,  //{csr_rd,csr_wr,csr_wr_num,csr_mask,csr_wvalue}
+    output     [5 :0] id_exc_rf,  //{INT,ADEF,BRK,INE,SYS,ertn}
+    output     [1 :0] id_timer_rf, //{inst_rdcntvh,inst_rdcntvl}
+
+    //tlb related
+    output     [9 :0] id_tlb_rf//{inst_tlbsrch,inst_tlbwr,inst_tlbfill,inst_tlbrd,inst_invtlb,tlb_op[4:0]}
 );
 
     wire        id_ready_go;
@@ -145,6 +150,7 @@
     wire        inst_pcaddu12i;
     wire        inst_lu12i_w;
 
+    //csr related
     wire        inst_csrrd;
     wire        inst_csrwr;
     wire        inst_csrxchg;
@@ -152,9 +158,18 @@
     wire        inst_syscall;
     wire        inst_break;
 
+    //time related
     wire        inst_rdcntvl;
     wire        inst_rdcntvh;
     wire        inst_rdcntid;
+
+    //tlb related
+    wire        inst_tlbsrch;
+    wire        inst_tlbwr;
+    wire        inst_tlbfill;
+    wire        inst_tlbrd;
+    wire        inst_invtlb;
+
 
     wire        need_ui5;
     wire        need_si12;
@@ -187,12 +202,8 @@
     wire [ 4:0] wb_rf_waddr;
     wire [31:0] wb_rf_wdata;
 
-    wire [13:0] exe_csr_wr_num;
-    wire        exe_csr_wr;
-    wire [13:0] mem_csr_wr_num;
-    wire        mem_csr_wr;
-    wire [13:0] wb_csr_wr_num;
-    wire        wb_csr_wr;
+    wire        exe_res_from_csr;
+    wire        mem_res_from_csr;
 
 
     wire [13:0] csr_num;
@@ -203,23 +214,29 @@
     wire [31:0] csr_rvalue;
     wire        csr_wr;
     wire        csr_rd;
-    wire        ans_is_csr;
+    // wire        ans_is_csr;
     wire        dst_is_rj;
     wire        ine_id;
 
-    assign {exe_csr_wr, exe_csr_wr_num, exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result} = exe_fwd_all;
-    assign {mem_csr_wr, mem_csr_wr_num,mem_ld_not_handled, mem_rf_we, mem_rf_waddr, mem_rf_wdata}  = mem_fwd_all;
-    assign {wb_csr_wr, wb_csr_wr_num, wb_rf_we, wb_rf_waddr, wb_rf_wdata}                          = wb_fwd_all;
+    wire [4 :0] tlb_op;
+
+    // assign {exe_csr_wr, exe_csr_wr_num, exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result} = exe_fwd_all;
+    // assign {mem_csr_wr, mem_csr_wr_num,mem_ld_not_handled, mem_rf_we, mem_rf_waddr, mem_rf_wdata}  = mem_fwd_all;
+    // assign {wb_csr_wr, wb_csr_wr_num, wb_rf_we, wb_rf_waddr, wb_rf_wdata}                          = wb_fwd_all;
+    
+    assign {exe_res_from_csr, exe_res_from_mem, exe_rf_we, exe_rf_waddr, exe_alu_result} = exe_fwd_all;
+    assign {mem_res_from_csr,mem_ld_not_handled, mem_rf_we, mem_rf_waddr, mem_rf_wdata}  = mem_fwd_all;
+    assign { wb_rf_we, wb_rf_waddr, wb_rf_wdata}                                         = wb_fwd_all;
 
     // valid signals
 
 
-    wire need_raddr1, need_raddr2, need_csr;
+    wire need_raddr1, need_raddr2;// need_csr;
     // wire raw_exe_id, raw_mem_id, raw_wb_id;
     wire raw_exe_ldw;
     wire raw_exe_r1, raw_exe_r2, raw_mem_r1, raw_mem_r2, raw_wb_r1, raw_wb_r2;
     wire csr_exe,csr_mem,csr_wb;
-    assign need_csr    = inst_csrrd | inst_csrxchg | inst_rdcntid;
+    // assign need_csr    = inst_csrrd | inst_csrxchg | inst_rdcntid;
     assign need_raddr1 = ~(inst_lu12i_w | inst_bl | inst_b | inst_csrrd | inst_syscall | inst_ertn 
                            | inst_rdcntid | inst_rdcntvh | inst_rdcntvl);
     assign need_raddr2 = need_raddr1 & ~(inst_addi_w | inst_ld_w | inst_ld_b | inst_ld_bu | inst_ld_h |
@@ -229,19 +246,25 @@
     // assign raw_mem_id  = mem_valid & mem_rf_we & ((need_raddr1 & (|rf_raddr1) & mem_rf_waddr == rf_raddr1) | (need_raddr2 & (|rf_raddr2) & mem_rf_waddr == rf_raddr2));
     // assign raw_wb_id   = wb_valid  & wb_rf_we  & ((need_raddr1 & (|rf_raddr1) & wb_rf_waddr  == rf_raddr1) | (need_raddr2 & (|rf_raddr2) & wb_rf_waddr  == rf_raddr2));
     assign raw_exe_ldw = (exe_valid & exe_rf_we & exe_res_from_mem) & (((|rf_raddr1) & exe_rf_waddr == rf_raddr1) | ((|rf_raddr2) & exe_rf_waddr == rf_raddr2))
-                         | mem_ld_not_handled & (raw_mem_r1 | raw_mem_r2) | need_csr & (csr_exe | csr_mem | csr_wb);
+                         | mem_ld_not_handled & (raw_mem_r1 | raw_mem_r2) | csr_exe | csr_mem;
     
     assign raw_exe_r1  = exe_valid & exe_rf_we & (need_raddr1 & (|rf_raddr1) & exe_rf_waddr == rf_raddr1);
     assign raw_exe_r2  = exe_valid & exe_rf_we & (need_raddr2 & (|rf_raddr2) & exe_rf_waddr == rf_raddr2);
-    assign csr_exe     = exe_valid & exe_csr_wr & (exe_csr_wr_num == csr_rd_num);
+    // assign csr_exe     = exe_valid & exe_csr_wr & (exe_csr_wr_num == csr_rd_num);
+    assign csr_exe     = exe_valid & exe_rf_we & exe_res_from_csr &
+                         ((need_raddr1 & (|rf_raddr1) & exe_rf_waddr == rf_raddr1) | 
+                          (need_raddr2 & (|rf_raddr2) & exe_rf_waddr == rf_raddr2));
 
     assign raw_mem_r1  = mem_valid & mem_rf_we & (need_raddr1 & (|rf_raddr1) & mem_rf_waddr == rf_raddr1);
     assign raw_mem_r2  = mem_valid & mem_rf_we & (need_raddr2 & (|rf_raddr2) & mem_rf_waddr == rf_raddr2);
-    assign csr_mem     = mem_valid & mem_csr_wr & (mem_csr_wr_num == csr_rd_num);
+    // assign csr_mem     = mem_valid & mem_csr_wr & (mem_csr_wr_num == csr_rd_num);
+    assign csr_mem     = mem_valid & mem_rf_we & mem_res_from_csr &
+                         ((need_raddr1 & (|rf_raddr1) & mem_rf_waddr == rf_raddr1) |
+                          (need_raddr2 & (|rf_raddr2) & mem_rf_waddr == rf_raddr2));
     
     assign raw_wb_r1   = wb_valid  & wb_rf_we  & (need_raddr1 & (|rf_raddr1) & wb_rf_waddr  == rf_raddr1);
     assign raw_wb_r2   = wb_valid  & wb_rf_we  & (need_raddr2 & (|rf_raddr2) & wb_rf_waddr  == rf_raddr2);
-    assign csr_wb      = wb_valid & wb_csr_wr & (wb_csr_wr_num == csr_rd_num);
+    // assign csr_wb      = wb_valid & wb_csr_wr & (wb_csr_wr_num == csr_rd_num);
 
     // assign raw_exe_id  = raw_exe_r1 | raw_exe_r2;
     // assign raw_mem_id  = raw_mem_r1 | raw_mem_r2;
@@ -249,7 +272,7 @@
 
     // assign id_ready_go = ~raw_exe_id & ~raw_mem_id & ~raw_wb_id;
     assign id_ready_go = ~raw_exe_ldw;
-    assign id_allowin  = ~id_valid | id_ready_go & exe_allowin | cancel_exc_ertn;
+    assign id_allowin  = ~id_valid | id_ready_go & exe_allowin | cancel_exc_ertn_tlbflush;
     assign id_to_exe_valid = id_valid & id_ready_go;
     assign ld_b   = inst_ld_b | inst_ld_bu;
     assign ld_h   = inst_ld_h | inst_ld_hu;
@@ -265,7 +288,7 @@
     always @(posedge clk) begin
         if(~resetn)
             id_valid <= 1'b0;
-        else if(br_taken_exe | cancel_exc_ertn)
+        else if(br_taken_exe | cancel_exc_ertn_tlbflush)
             id_valid <= 1'b0;
         else if(id_allowin)begin
             if(br_taken_id)//被除法指令阻塞�?�且id级发生需要写回的跳转
@@ -386,6 +409,12 @@
     assign inst_syscall = op_31_26_d[6'h0] & op_25_22_d[4'h0] & op_21_20_d[2'h2] & op_19_15_d[5'h16];
     assign inst_break   = op_31_26_d[6'h0] & op_25_22_d[4'h0] & op_21_20_d[2'h2] & op_19_15_d[5'h14];
 
+    assign inst_tlbsrch = op_31_26_d[6'h1] & op_25_22_d[4'h9] & op_21_20_d[2'h0] & op_19_15_d[5'h10] & inst[14:10] == 5'ha & inst[9:0] == 0;
+    assign inst_tlbrd   = op_31_26_d[6'h1] & op_25_22_d[4'h9] & op_21_20_d[2'h0] & op_19_15_d[5'h10] & inst[14:10] == 5'hb & inst[9:0] == 0;
+    assign inst_tlbwr   = op_31_26_d[6'h1] & op_25_22_d[4'h9] & op_21_20_d[2'h0] & op_19_15_d[5'h10] & inst[14:10] == 5'hc & inst[9:0] == 0;
+    assign inst_tlbfill = op_31_26_d[6'h1] & op_25_22_d[4'h9] & op_21_20_d[2'h0] & op_19_15_d[5'h10] & inst[14:10] == 5'hd & inst[9:0] == 0;
+    assign inst_invtlb  = op_31_26_d[6'h1] & op_25_22_d[4'h9] & op_21_20_d[2'h0] & op_19_15_d[5'h13];
+
     assign ine_id = ~(inst_add_w | inst_sub_w | inst_slt | inst_sltu | inst_nor | inst_and | inst_or | inst_xor
                     | inst_slli_w | inst_srli_w | inst_srai_w | inst_addi_w | inst_slti | inst_sltui | inst_andi
                     | inst_ori | inst_xori | inst_sll_w | inst_srl_w | inst_sra_w | inst_mul_w | inst_mulh_w 
@@ -393,8 +422,10 @@
                     | inst_ld_b | inst_ld_h | inst_ld_bu | inst_ld_hu | inst_st_b | inst_st_h | inst_jirl
                     | inst_b | inst_bl | inst_blt | inst_bge | inst_bltu | inst_bgeu | inst_beq | inst_bne
                     | inst_pcaddu12i | inst_lu12i_w | inst_csrrd | inst_csrwr | inst_csrxchg 
-                    | inst_ertn | inst_syscall | inst_break | inst_rdcntvl | inst_rdcntvh | inst_rdcntid);
-
+                    | inst_ertn | inst_syscall | inst_break | inst_rdcntvl | inst_rdcntvh | inst_rdcntid
+                    | inst_tlbsrch | inst_tlbrd | inst_tlbwr | inst_tlbfill | inst_invtlb) 
+                    | (inst_invtlb & (&inst[2:0]) | inst_invtlb & (|inst[4:3]));//not able to handle invtlb
+                    //now support int br mul div csr exc time tlb
 
     assign alu_op[ 0] = inst_add_w | inst_addi_w | inst_ld_w | inst_st_w
                         | inst_jirl | inst_bl | inst_pcaddu12i | inst_ld_b
@@ -409,7 +440,8 @@
     assign alu_op[ 8] = inst_slli_w | inst_sll_w;
     assign alu_op[ 9] = inst_srli_w | inst_srl_w;
     assign alu_op[10] = inst_srai_w | inst_sra_w;
-    assign alu_op[11] = inst_lu12i_w | ans_is_csr;
+    // assign alu_op[11] = inst_lu12i_w | ans_is_csr;
+    assign alu_op[11] = inst_lu12i_w ;
     assign alu_op[12] = inst_mul_w | inst_mulh_w | inst_mulh_wu;
     assign alu_op[13] = inst_div_w | inst_div_wu | inst_mod_w | inst_mod_wu;//mod uses the same op as div and
 
@@ -436,7 +468,7 @@
                            | inst_csrwr | inst_csrxchg;
 
     assign src1_is_pc    = inst_jirl | inst_bl | inst_pcaddu12i;
-    assign ans_is_csr    = inst_csrrd | inst_csrwr | inst_csrxchg | inst_rdcntid;
+    // assign ans_is_csr    = inst_csrrd | inst_csrwr | inst_csrxchg | inst_rdcntid;
 
     assign src2_is_imm =inst_slli_w |
                         inst_srli_w |
@@ -460,13 +492,15 @@
                         inst_xori   |
                         inst_pcaddu12i;
     assign alu_src1 = src1_is_pc  ? id_pc[31:0] : rj_value;
-    assign alu_src2 = ans_is_csr? csr_rd_value : src2_is_imm ? imm : rkd_value;
+    // assign alu_src2 = ans_is_csr? csr_rd_value : src2_is_imm ? imm : rkd_value;
+    assign alu_src2 = src2_is_imm ? imm : rkd_value;
 
     assign res_from_mem = inst_ld_w | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu;
     assign dst_is_r1    = inst_bl;
     assign dst_is_rj   = inst_rdcntid;
     assign gr_we        = ~inst_beq & ~inst_bne & ~inst_b & ~inst_st_w & ~inst_st_h & ~inst_st_b & ~inst_blt 
-                          & ~inst_bltu & ~inst_bge & ~inst_bgeu & ~inst_syscall & ~inst_ertn;// serve as rf_we
+                          & ~inst_bltu & ~inst_bge & ~inst_bgeu & ~inst_syscall & ~inst_ertn & ~inst_tlbsrch 
+                          & ~inst_tlbwr & ~inst_tlbwr & ~inst_tlbfill & ~ inst_invtlb;// serve as rf_we
     assign mem_we       = inst_st_w | inst_st_b | inst_st_h;   
     assign dest         = dst_is_rj ? rj : dst_is_r1 ? 5'd1 : rd;
 
@@ -487,8 +521,6 @@
     .waddr  (wb_rf_waddr),
     .wdata  (wb_rf_wdata)
     );
-    // assign rj_value  = rf_rdata1;
-    // assign rkd_value = rf_rdata2;
     assign rj_value  = raw_exe_r1 ? exe_alu_result
                      : raw_mem_r1 ? mem_rf_wdata
                      : raw_wb_r1  ? wb_rf_wdata
@@ -504,15 +536,19 @@
     assign id_rkd_value = rkd_value;
     assign id_res_from_mem = res_from_mem;
 
-    assign csr_num    = inst[23:10];
-    assign csr_rd_num = {14{~inst_rdcntid}} & csr_num | {14{inst_rdcntid}} & 14'h40;
-    assign csr_wr_num = csr_num;
+    //csr related
+    assign csr_num    = {14{~inst_rdcntid}} & inst[23:10] | {14{inst_rdcntid}} & 14'h40;
+    // assign csr_rd_num = {14{~inst_rdcntid}} & csr_num | {14{inst_rdcntid}} & 14'h40;
+    // assign csr_wr_num = csr_num;
     assign id_exc_rf  = {has_int, if_exc_rf, inst_break, ine_id, inst_syscall, inst_ertn};
     assign csr_mask = {32{inst_csrwr}} & {32{1'b1}} | {32{inst_csrxchg}} & rj_value;
     assign csr_wr_value = rkd_value;
     assign csr_rd = inst_csrrd | inst_csrxchg | inst_csrwr | inst_rdcntid;
-    assign csr_re = csr_rd;
     assign csr_wr = inst_csrwr | inst_csrxchg;
-    assign id_csr_rf = {csr_wr,csr_wr_num,csr_mask,csr_wr_value};
+    assign id_csr_rf = {csr_rd,csr_wr,csr_num,csr_mask,csr_wr_value};
     assign id_timer_rf  = {inst_rdcntvh,inst_rdcntvl};
+
+    //tlb related
+    assign tlb_op = inst[4:0];
+    assign id_tlb_rf = {inst_tlbsrch,inst_tlbwr,inst_tlbfill,inst_tlbrd,inst_invtlb,tlb_op[4:0]};
 endmodule
